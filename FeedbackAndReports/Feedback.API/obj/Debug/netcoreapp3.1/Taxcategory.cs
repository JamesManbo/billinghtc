// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/taxcategory.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ContractManagement.API.Protos {

  /// <summary>Holder for reflection information generated from Protos/taxcategory.proto</summary>
  public static partial class TaxcategoryReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/taxcategory.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaxcategoryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90b3MvdGF4Y2F0ZWdvcnkucHJvdG8SFUNvbnRyYWN0TWFuYWdlbWVu",
            "dEFwaRoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGh9nb29nbGUv",
            "cHJvdG9idWYvdGltZXN0YW1wLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1w",
            "dHkucHJvdG8aE1Byb3Rvcy9jb21tb24ucHJvdG8iXAoWVGF4Q2F0ZWdvcnlM",
            "aXN0R3JwY0RUTxJCCg9UYXhDYXRlZ29yeUR0b3MYASADKAsyKS5Db250cmFj",
            "dE1hbmFnZW1lbnRBcGkuVGF4Q2F0ZWdvcnlHcnBjRFRPIpUDChpUYXhDYXRl",
            "Z29yeVBhZ2VMaXN0R3JwY0RUTxI5CgZzdWJzZXQYASADKAsyKS5Db250cmFj",
            "dE1hbmFnZW1lbnRBcGkuVGF4Q2F0ZWdvcnlHcnBjRFRPEioKBWNvdW50GAIg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSLgoJcGFnZUNvdW50",
            "GAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSMwoOdG90YWxJ",
            "dGVtQ291bnQYBCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRIp",
            "CgRza2lwGAUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSKQoE",
            "dGFrZRgGIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEhcKD2hh",
            "c1ByZXZpb3VzUGFnZRgHIAEoCBITCgtoYXNOZXh0UGFnZRgIIAEoCBITCgtp",
            "c0ZpcnN0UGFnZRgJIAEoCBISCgppc0xhc3RQYWdlGAogASgIItMDChJUYXhD",
            "YXRlZ29yeUdycGNEVE8SLQoHVGF4TmFtZRgBIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5TdHJpbmdWYWx1ZRItCgdUYXhDb2RlGAIgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLlN0cmluZ1ZhbHVlEicKAmlkGAMgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkludDMyVmFsdWUSMQoMbWFya2V0QXJlYUlkGAQgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDMyVmFsdWUSOAoTYWdlbnRDb250cmFjdENvZGVJZBgF",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEjMKDW51bWJlck9m",
            "VW5pdHMYBiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSMQoL",
            "ZGVzY3JpcHRpb24YByABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFs",
            "dWUSMgoNbnVtYmVyT2ZSb29tcxgIIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5J",
            "bnQzMlZhbHVlEi0KCHRheFZhbHVlGAkgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkZsb2F0VmFsdWUy3gEKFlRheENhdGVnb3J5U2VydmljZUdycGMSUQoGR2V0",
            "QWxsEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5Gi0uQ29udHJhY3RNYW5hZ2Vt",
            "ZW50QXBpLlRheENhdGVnb3J5TGlzdEdycGNEVE8iABJxChBHZXRUYXhDYXRl",
            "Z29yaWVzEiguQ29udHJhY3RNYW5hZ2VtZW50QXBpLlJlcXVlc3RGaWx0ZXJH",
            "cnBjGjEuQ29udHJhY3RNYW5hZ2VtZW50QXBpLlRheENhdGVnb3J5UGFnZUxp",
            "c3RHcnBjRFRPIgBCIKoCHUNvbnRyYWN0TWFuYWdlbWVudC5BUEkuUHJvdG9z",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::ContractManagement.API.Protos.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ContractManagement.API.Protos.TaxCategoryListGrpcDTO), global::ContractManagement.API.Protos.TaxCategoryListGrpcDTO.Parser, new[]{ "TaxCategoryDtos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ContractManagement.API.Protos.TaxCategoryPageListGrpcDTO), global::ContractManagement.API.Protos.TaxCategoryPageListGrpcDTO.Parser, new[]{ "Subset", "Count", "PageCount", "TotalItemCount", "Skip", "Take", "HasPreviousPage", "HasNextPage", "IsFirstPage", "IsLastPage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ContractManagement.API.Protos.TaxCategoryGrpcDTO), global::ContractManagement.API.Protos.TaxCategoryGrpcDTO.Parser, new[]{ "TaxName", "TaxCode", "Id", "MarketAreaId", "AgentContractCodeId", "NumberOfUnits", "Description", "NumberOfRooms", "TaxValue" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TaxCategoryListGrpcDTO : pb::IMessage<TaxCategoryListGrpcDTO> {
    private static readonly pb::MessageParser<TaxCategoryListGrpcDTO> _parser = new pb::MessageParser<TaxCategoryListGrpcDTO>(() => new TaxCategoryListGrpcDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaxCategoryListGrpcDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ContractManagement.API.Protos.TaxcategoryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxCategoryListGrpcDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxCategoryListGrpcDTO(TaxCategoryListGrpcDTO other) : this() {
      taxCategoryDtos_ = other.taxCategoryDtos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxCategoryListGrpcDTO Clone() {
      return new TaxCategoryListGrpcDTO(this);
    }

    /// <summary>Field number for the "TaxCategoryDtos" field.</summary>
    public const int TaxCategoryDtosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ContractManagement.API.Protos.TaxCategoryGrpcDTO> _repeated_taxCategoryDtos_codec
        = pb::FieldCodec.ForMessage(10, global::ContractManagement.API.Protos.TaxCategoryGrpcDTO.Parser);
    private readonly pbc::RepeatedField<global::ContractManagement.API.Protos.TaxCategoryGrpcDTO> taxCategoryDtos_ = new pbc::RepeatedField<global::ContractManagement.API.Protos.TaxCategoryGrpcDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ContractManagement.API.Protos.TaxCategoryGrpcDTO> TaxCategoryDtos {
      get { return taxCategoryDtos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaxCategoryListGrpcDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaxCategoryListGrpcDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!taxCategoryDtos_.Equals(other.taxCategoryDtos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= taxCategoryDtos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taxCategoryDtos_.WriteTo(output, _repeated_taxCategoryDtos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taxCategoryDtos_.CalculateSize(_repeated_taxCategoryDtos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaxCategoryListGrpcDTO other) {
      if (other == null) {
        return;
      }
      taxCategoryDtos_.Add(other.taxCategoryDtos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            taxCategoryDtos_.AddEntriesFrom(input, _repeated_taxCategoryDtos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaxCategoryPageListGrpcDTO : pb::IMessage<TaxCategoryPageListGrpcDTO> {
    private static readonly pb::MessageParser<TaxCategoryPageListGrpcDTO> _parser = new pb::MessageParser<TaxCategoryPageListGrpcDTO>(() => new TaxCategoryPageListGrpcDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaxCategoryPageListGrpcDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ContractManagement.API.Protos.TaxcategoryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxCategoryPageListGrpcDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxCategoryPageListGrpcDTO(TaxCategoryPageListGrpcDTO other) : this() {
      subset_ = other.subset_.Clone();
      Count = other.Count;
      PageCount = other.PageCount;
      TotalItemCount = other.TotalItemCount;
      Skip = other.Skip;
      Take = other.Take;
      hasPreviousPage_ = other.hasPreviousPage_;
      hasNextPage_ = other.hasNextPage_;
      isFirstPage_ = other.isFirstPage_;
      isLastPage_ = other.isLastPage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxCategoryPageListGrpcDTO Clone() {
      return new TaxCategoryPageListGrpcDTO(this);
    }

    /// <summary>Field number for the "subset" field.</summary>
    public const int SubsetFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ContractManagement.API.Protos.TaxCategoryGrpcDTO> _repeated_subset_codec
        = pb::FieldCodec.ForMessage(10, global::ContractManagement.API.Protos.TaxCategoryGrpcDTO.Parser);
    private readonly pbc::RepeatedField<global::ContractManagement.API.Protos.TaxCategoryGrpcDTO> subset_ = new pbc::RepeatedField<global::ContractManagement.API.Protos.TaxCategoryGrpcDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ContractManagement.API.Protos.TaxCategoryGrpcDTO> Subset {
      get { return subset_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_count_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }


    /// <summary>Field number for the "pageCount" field.</summary>
    public const int PageCountFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_pageCount_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? pageCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? PageCount {
      get { return pageCount_; }
      set {
        pageCount_ = value;
      }
    }


    /// <summary>Field number for the "totalItemCount" field.</summary>
    public const int TotalItemCountFieldNumber = 4;
    private static readonly pb::FieldCodec<int?> _single_totalItemCount_codec = pb::FieldCodec.ForStructWrapper<int>(34);
    private int? totalItemCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? TotalItemCount {
      get { return totalItemCount_; }
      set {
        totalItemCount_ = value;
      }
    }


    /// <summary>Field number for the "skip" field.</summary>
    public const int SkipFieldNumber = 5;
    private static readonly pb::FieldCodec<int?> _single_skip_codec = pb::FieldCodec.ForStructWrapper<int>(42);
    private int? skip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Skip {
      get { return skip_; }
      set {
        skip_ = value;
      }
    }


    /// <summary>Field number for the "take" field.</summary>
    public const int TakeFieldNumber = 6;
    private static readonly pb::FieldCodec<int?> _single_take_codec = pb::FieldCodec.ForStructWrapper<int>(50);
    private int? take_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Take {
      get { return take_; }
      set {
        take_ = value;
      }
    }


    /// <summary>Field number for the "hasPreviousPage" field.</summary>
    public const int HasPreviousPageFieldNumber = 7;
    private bool hasPreviousPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPreviousPage {
      get { return hasPreviousPage_; }
      set {
        hasPreviousPage_ = value;
      }
    }

    /// <summary>Field number for the "hasNextPage" field.</summary>
    public const int HasNextPageFieldNumber = 8;
    private bool hasNextPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNextPage {
      get { return hasNextPage_; }
      set {
        hasNextPage_ = value;
      }
    }

    /// <summary>Field number for the "isFirstPage" field.</summary>
    public const int IsFirstPageFieldNumber = 9;
    private bool isFirstPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirstPage {
      get { return isFirstPage_; }
      set {
        isFirstPage_ = value;
      }
    }

    /// <summary>Field number for the "isLastPage" field.</summary>
    public const int IsLastPageFieldNumber = 10;
    private bool isLastPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLastPage {
      get { return isLastPage_; }
      set {
        isLastPage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaxCategoryPageListGrpcDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaxCategoryPageListGrpcDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!subset_.Equals(other.subset_)) return false;
      if (Count != other.Count) return false;
      if (PageCount != other.PageCount) return false;
      if (TotalItemCount != other.TotalItemCount) return false;
      if (Skip != other.Skip) return false;
      if (Take != other.Take) return false;
      if (HasPreviousPage != other.HasPreviousPage) return false;
      if (HasNextPage != other.HasNextPage) return false;
      if (IsFirstPage != other.IsFirstPage) return false;
      if (IsLastPage != other.IsLastPage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= subset_.GetHashCode();
      if (count_ != null) hash ^= Count.GetHashCode();
      if (pageCount_ != null) hash ^= PageCount.GetHashCode();
      if (totalItemCount_ != null) hash ^= TotalItemCount.GetHashCode();
      if (skip_ != null) hash ^= Skip.GetHashCode();
      if (take_ != null) hash ^= Take.GetHashCode();
      if (HasPreviousPage != false) hash ^= HasPreviousPage.GetHashCode();
      if (HasNextPage != false) hash ^= HasNextPage.GetHashCode();
      if (IsFirstPage != false) hash ^= IsFirstPage.GetHashCode();
      if (IsLastPage != false) hash ^= IsLastPage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      subset_.WriteTo(output, _repeated_subset_codec);
      if (count_ != null) {
        _single_count_codec.WriteTagAndValue(output, Count);
      }
      if (pageCount_ != null) {
        _single_pageCount_codec.WriteTagAndValue(output, PageCount);
      }
      if (totalItemCount_ != null) {
        _single_totalItemCount_codec.WriteTagAndValue(output, TotalItemCount);
      }
      if (skip_ != null) {
        _single_skip_codec.WriteTagAndValue(output, Skip);
      }
      if (take_ != null) {
        _single_take_codec.WriteTagAndValue(output, Take);
      }
      if (HasPreviousPage != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasPreviousPage);
      }
      if (HasNextPage != false) {
        output.WriteRawTag(64);
        output.WriteBool(HasNextPage);
      }
      if (IsFirstPage != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsFirstPage);
      }
      if (IsLastPage != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsLastPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += subset_.CalculateSize(_repeated_subset_codec);
      if (count_ != null) {
        size += _single_count_codec.CalculateSizeWithTag(Count);
      }
      if (pageCount_ != null) {
        size += _single_pageCount_codec.CalculateSizeWithTag(PageCount);
      }
      if (totalItemCount_ != null) {
        size += _single_totalItemCount_codec.CalculateSizeWithTag(TotalItemCount);
      }
      if (skip_ != null) {
        size += _single_skip_codec.CalculateSizeWithTag(Skip);
      }
      if (take_ != null) {
        size += _single_take_codec.CalculateSizeWithTag(Take);
      }
      if (HasPreviousPage != false) {
        size += 1 + 1;
      }
      if (HasNextPage != false) {
        size += 1 + 1;
      }
      if (IsFirstPage != false) {
        size += 1 + 1;
      }
      if (IsLastPage != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaxCategoryPageListGrpcDTO other) {
      if (other == null) {
        return;
      }
      subset_.Add(other.subset_);
      if (other.count_ != null) {
        if (count_ == null || other.Count != 0) {
          Count = other.Count;
        }
      }
      if (other.pageCount_ != null) {
        if (pageCount_ == null || other.PageCount != 0) {
          PageCount = other.PageCount;
        }
      }
      if (other.totalItemCount_ != null) {
        if (totalItemCount_ == null || other.TotalItemCount != 0) {
          TotalItemCount = other.TotalItemCount;
        }
      }
      if (other.skip_ != null) {
        if (skip_ == null || other.Skip != 0) {
          Skip = other.Skip;
        }
      }
      if (other.take_ != null) {
        if (take_ == null || other.Take != 0) {
          Take = other.Take;
        }
      }
      if (other.HasPreviousPage != false) {
        HasPreviousPage = other.HasPreviousPage;
      }
      if (other.HasNextPage != false) {
        HasNextPage = other.HasNextPage;
      }
      if (other.IsFirstPage != false) {
        IsFirstPage = other.IsFirstPage;
      }
      if (other.IsLastPage != false) {
        IsLastPage = other.IsLastPage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            subset_.AddEntriesFrom(input, _repeated_subset_codec);
            break;
          }
          case 18: {
            int? value = _single_count_codec.Read(input);
            if (count_ == null || value != 0) {
              Count = value;
            }
            break;
          }
          case 26: {
            int? value = _single_pageCount_codec.Read(input);
            if (pageCount_ == null || value != 0) {
              PageCount = value;
            }
            break;
          }
          case 34: {
            int? value = _single_totalItemCount_codec.Read(input);
            if (totalItemCount_ == null || value != 0) {
              TotalItemCount = value;
            }
            break;
          }
          case 42: {
            int? value = _single_skip_codec.Read(input);
            if (skip_ == null || value != 0) {
              Skip = value;
            }
            break;
          }
          case 50: {
            int? value = _single_take_codec.Read(input);
            if (take_ == null || value != 0) {
              Take = value;
            }
            break;
          }
          case 56: {
            HasPreviousPage = input.ReadBool();
            break;
          }
          case 64: {
            HasNextPage = input.ReadBool();
            break;
          }
          case 72: {
            IsFirstPage = input.ReadBool();
            break;
          }
          case 80: {
            IsLastPage = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaxCategoryGrpcDTO : pb::IMessage<TaxCategoryGrpcDTO> {
    private static readonly pb::MessageParser<TaxCategoryGrpcDTO> _parser = new pb::MessageParser<TaxCategoryGrpcDTO>(() => new TaxCategoryGrpcDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaxCategoryGrpcDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ContractManagement.API.Protos.TaxcategoryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxCategoryGrpcDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxCategoryGrpcDTO(TaxCategoryGrpcDTO other) : this() {
      TaxName = other.TaxName;
      TaxCode = other.TaxCode;
      Id = other.Id;
      MarketAreaId = other.MarketAreaId;
      AgentContractCodeId = other.AgentContractCodeId;
      NumberOfUnits = other.NumberOfUnits;
      Description = other.Description;
      NumberOfRooms = other.NumberOfRooms;
      TaxValue = other.TaxValue;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxCategoryGrpcDTO Clone() {
      return new TaxCategoryGrpcDTO(this);
    }

    /// <summary>Field number for the "TaxName" field.</summary>
    public const int TaxNameFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_taxName_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string taxName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaxName {
      get { return taxName_; }
      set {
        taxName_ = value;
      }
    }


    /// <summary>Field number for the "TaxCode" field.</summary>
    public const int TaxCodeFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_taxCode_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string taxCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaxCode {
      get { return taxCode_; }
      set {
        taxCode_ = value;
      }
    }


    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_id_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }


    /// <summary>Field number for the "marketAreaId" field.</summary>
    public const int MarketAreaIdFieldNumber = 4;
    private static readonly pb::FieldCodec<int?> _single_marketAreaId_codec = pb::FieldCodec.ForStructWrapper<int>(34);
    private int? marketAreaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? MarketAreaId {
      get { return marketAreaId_; }
      set {
        marketAreaId_ = value;
      }
    }


    /// <summary>Field number for the "agentContractCodeId" field.</summary>
    public const int AgentContractCodeIdFieldNumber = 5;
    private static readonly pb::FieldCodec<int?> _single_agentContractCodeId_codec = pb::FieldCodec.ForStructWrapper<int>(42);
    private int? agentContractCodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? AgentContractCodeId {
      get { return agentContractCodeId_; }
      set {
        agentContractCodeId_ = value;
      }
    }


    /// <summary>Field number for the "numberOfUnits" field.</summary>
    public const int NumberOfUnitsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_numberOfUnits_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string numberOfUnits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NumberOfUnits {
      get { return numberOfUnits_; }
      set {
        numberOfUnits_ = value;
      }
    }


    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_description_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }


    /// <summary>Field number for the "numberOfRooms" field.</summary>
    public const int NumberOfRoomsFieldNumber = 8;
    private static readonly pb::FieldCodec<int?> _single_numberOfRooms_codec = pb::FieldCodec.ForStructWrapper<int>(66);
    private int? numberOfRooms_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? NumberOfRooms {
      get { return numberOfRooms_; }
      set {
        numberOfRooms_ = value;
      }
    }


    /// <summary>Field number for the "taxValue" field.</summary>
    public const int TaxValueFieldNumber = 9;
    private static readonly pb::FieldCodec<float?> _single_taxValue_codec = pb::FieldCodec.ForStructWrapper<float>(74);
    private float? taxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? TaxValue {
      get { return taxValue_; }
      set {
        taxValue_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaxCategoryGrpcDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaxCategoryGrpcDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaxName != other.TaxName) return false;
      if (TaxCode != other.TaxCode) return false;
      if (Id != other.Id) return false;
      if (MarketAreaId != other.MarketAreaId) return false;
      if (AgentContractCodeId != other.AgentContractCodeId) return false;
      if (NumberOfUnits != other.NumberOfUnits) return false;
      if (Description != other.Description) return false;
      if (NumberOfRooms != other.NumberOfRooms) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(TaxValue, other.TaxValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (taxName_ != null) hash ^= TaxName.GetHashCode();
      if (taxCode_ != null) hash ^= TaxCode.GetHashCode();
      if (id_ != null) hash ^= Id.GetHashCode();
      if (marketAreaId_ != null) hash ^= MarketAreaId.GetHashCode();
      if (agentContractCodeId_ != null) hash ^= AgentContractCodeId.GetHashCode();
      if (numberOfUnits_ != null) hash ^= NumberOfUnits.GetHashCode();
      if (description_ != null) hash ^= Description.GetHashCode();
      if (numberOfRooms_ != null) hash ^= NumberOfRooms.GetHashCode();
      if (taxValue_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(TaxValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (taxName_ != null) {
        _single_taxName_codec.WriteTagAndValue(output, TaxName);
      }
      if (taxCode_ != null) {
        _single_taxCode_codec.WriteTagAndValue(output, TaxCode);
      }
      if (id_ != null) {
        _single_id_codec.WriteTagAndValue(output, Id);
      }
      if (marketAreaId_ != null) {
        _single_marketAreaId_codec.WriteTagAndValue(output, MarketAreaId);
      }
      if (agentContractCodeId_ != null) {
        _single_agentContractCodeId_codec.WriteTagAndValue(output, AgentContractCodeId);
      }
      if (numberOfUnits_ != null) {
        _single_numberOfUnits_codec.WriteTagAndValue(output, NumberOfUnits);
      }
      if (description_ != null) {
        _single_description_codec.WriteTagAndValue(output, Description);
      }
      if (numberOfRooms_ != null) {
        _single_numberOfRooms_codec.WriteTagAndValue(output, NumberOfRooms);
      }
      if (taxValue_ != null) {
        _single_taxValue_codec.WriteTagAndValue(output, TaxValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (taxName_ != null) {
        size += _single_taxName_codec.CalculateSizeWithTag(TaxName);
      }
      if (taxCode_ != null) {
        size += _single_taxCode_codec.CalculateSizeWithTag(TaxCode);
      }
      if (id_ != null) {
        size += _single_id_codec.CalculateSizeWithTag(Id);
      }
      if (marketAreaId_ != null) {
        size += _single_marketAreaId_codec.CalculateSizeWithTag(MarketAreaId);
      }
      if (agentContractCodeId_ != null) {
        size += _single_agentContractCodeId_codec.CalculateSizeWithTag(AgentContractCodeId);
      }
      if (numberOfUnits_ != null) {
        size += _single_numberOfUnits_codec.CalculateSizeWithTag(NumberOfUnits);
      }
      if (description_ != null) {
        size += _single_description_codec.CalculateSizeWithTag(Description);
      }
      if (numberOfRooms_ != null) {
        size += _single_numberOfRooms_codec.CalculateSizeWithTag(NumberOfRooms);
      }
      if (taxValue_ != null) {
        size += _single_taxValue_codec.CalculateSizeWithTag(TaxValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaxCategoryGrpcDTO other) {
      if (other == null) {
        return;
      }
      if (other.taxName_ != null) {
        if (taxName_ == null || other.TaxName != "") {
          TaxName = other.TaxName;
        }
      }
      if (other.taxCode_ != null) {
        if (taxCode_ == null || other.TaxCode != "") {
          TaxCode = other.TaxCode;
        }
      }
      if (other.id_ != null) {
        if (id_ == null || other.Id != 0) {
          Id = other.Id;
        }
      }
      if (other.marketAreaId_ != null) {
        if (marketAreaId_ == null || other.MarketAreaId != 0) {
          MarketAreaId = other.MarketAreaId;
        }
      }
      if (other.agentContractCodeId_ != null) {
        if (agentContractCodeId_ == null || other.AgentContractCodeId != 0) {
          AgentContractCodeId = other.AgentContractCodeId;
        }
      }
      if (other.numberOfUnits_ != null) {
        if (numberOfUnits_ == null || other.NumberOfUnits != "") {
          NumberOfUnits = other.NumberOfUnits;
        }
      }
      if (other.description_ != null) {
        if (description_ == null || other.Description != "") {
          Description = other.Description;
        }
      }
      if (other.numberOfRooms_ != null) {
        if (numberOfRooms_ == null || other.NumberOfRooms != 0) {
          NumberOfRooms = other.NumberOfRooms;
        }
      }
      if (other.taxValue_ != null) {
        if (taxValue_ == null || other.TaxValue != 0F) {
          TaxValue = other.TaxValue;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_taxName_codec.Read(input);
            if (taxName_ == null || value != "") {
              TaxName = value;
            }
            break;
          }
          case 18: {
            string value = _single_taxCode_codec.Read(input);
            if (taxCode_ == null || value != "") {
              TaxCode = value;
            }
            break;
          }
          case 26: {
            int? value = _single_id_codec.Read(input);
            if (id_ == null || value != 0) {
              Id = value;
            }
            break;
          }
          case 34: {
            int? value = _single_marketAreaId_codec.Read(input);
            if (marketAreaId_ == null || value != 0) {
              MarketAreaId = value;
            }
            break;
          }
          case 42: {
            int? value = _single_agentContractCodeId_codec.Read(input);
            if (agentContractCodeId_ == null || value != 0) {
              AgentContractCodeId = value;
            }
            break;
          }
          case 50: {
            string value = _single_numberOfUnits_codec.Read(input);
            if (numberOfUnits_ == null || value != "") {
              NumberOfUnits = value;
            }
            break;
          }
          case 58: {
            string value = _single_description_codec.Read(input);
            if (description_ == null || value != "") {
              Description = value;
            }
            break;
          }
          case 66: {
            int? value = _single_numberOfRooms_codec.Read(input);
            if (numberOfRooms_ == null || value != 0) {
              NumberOfRooms = value;
            }
            break;
          }
          case 74: {
            float? value = _single_taxValue_codec.Read(input);
            if (taxValue_ == null || value != 0F) {
              TaxValue = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
