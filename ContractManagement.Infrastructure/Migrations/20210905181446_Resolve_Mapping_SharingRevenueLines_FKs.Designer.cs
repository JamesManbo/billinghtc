// <auto-generated />
using System;
using ContractManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContractManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ContractDbContext))]
    [Migration("20210905181446_Resolve_Mapping_SharingRevenueLines_FKs")]
    partial class Resolve_Mapping_SharingRevenueLines_FKs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ContractManagement.Domain.AggregateModels.PictureAggregate.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PictureType")
                        .HasColumnType("int");

                    b.Property<string>("RedirectLink")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.BaseContract.ContractContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ContractFormId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractFormSignatureId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DigitalSignatureId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int?>("InContractId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OutContractId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ContractFormSignatureId");

                    b.HasIndex("DigitalSignatureId");

                    b.HasIndex("InContractId")
                        .IsUnique();

                    b.HasIndex("OutContractId")
                        .IsUnique();

                    b.ToTable("ContractContents");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.BaseContract.ContractForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DigitalSignatureId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DigitalSignatureId");

                    b.ToTable("ContractForms");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.BaseContract.ContractStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ContractStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chờ ký"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Đã ký"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Đã nghiệm thu"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tạm ngưng"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Đã thanh lý"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Trình ký"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hủy"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.BaseContract.ContractTotalByCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<decimal>("EquipmentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("GrandTotalBeforeTax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("InContractId")
                        .HasColumnType("int");

                    b.Property<decimal>("InstallationFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("OtherFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("OutContractId")
                        .HasColumnType("int");

                    b.Property<decimal>("PromotionTotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ServicePackageAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SubTotalBeforeTax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalTaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InContractId");

                    b.HasIndex("OutContractId");

                    b.ToTable("ContractTotalByCurrencies");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.BaseContract.OutContractServicePackageStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("OutContractServicePackageStatuses");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.BaseContract.ServiceLevelAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OutContractId")
                        .HasColumnType("int");

                    b.Property<int?>("OutContractServicePackageId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("varchar(68) CHARACTER SET utf8mb4")
                        .HasMaxLength(68);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OutContractServicePackageId");

                    b.ToTable("ServiceLevelAgreements");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.BaseContract.TransactionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TransactionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chờ triển khai"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Từ chối nghiệm thu"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Đã triển khai"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Đã nghiệm thu"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Thiết bị đã nhập kho"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Hoàn thành"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.Commons.AttachmentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<int?>("InContractId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OutContractId")
                        .HasColumnType("int");

                    b.Property<string>("RedirectLink")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ResourceStorage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InContractId");

                    b.HasIndex("OutContractId");

                    b.HasIndex("TransactionId");

                    b.ToTable("AttachmentFiles");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ContractOfTaxAggregate.InContractTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int?>("InContractId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TaxCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InContractId");

                    b.ToTable("InContractTaxes");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ContractOfTaxAggregate.OutContractServicePackageTax", b =>
                {
                    b.Property<int>("OutContractServicePackageId")
                        .HasColumnType("int");

                    b.Property<int>("TaxCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TaxCategoryCode")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("TaxCategoryName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<float>("TaxValue")
                        .HasColumnType("float");

                    b.HasKey("OutContractServicePackageId", "TaxCategoryId");

                    b.HasIndex("TaxCategoryId");

                    b.ToTable("OutContractServicePackageTaxes");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ContractorAggregate.CardType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ContractorAggregate.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountingCustomerCode")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ApplicationUserIdentityGuid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AuthorizationLetter")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ContractorAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorCityId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorDistrict")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorDistrictId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorFax")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorFullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorIdNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorPhone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorShortName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorTaxIdNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("IdentityGuid")
                        .HasColumnType("varchar(68) CHARACTER SET utf8mb4")
                        .HasMaxLength(68);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBuyer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEnterprise")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHTC")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPartner")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ParentId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Position")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Representative")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserIdentityGuid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("IdentityGuid")
                        .IsUnique();

                    b.ToTable("Contractors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContractorAddress = "Tầng 6 – Lotus Building, số 2, Duy Tân, Phường Dịch Vọng Hậu, Quận Cầu Giấy, Thành phố Hà Nội, Việt Nam",
                            ContractorCode = "HTC_ITC",
                            ContractorEmail = "info@htc-itc.com.vn",
                            ContractorFullName = "Công ty cổ phần HTC viễn thông quốc tế",
                            ContractorPhone = "(024) 3573 9419",
                            ContractorTaxIdNo = "0102362584",
                            CreatedBy = "ADMINISTRATOR",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBuyer = false,
                            IsDeleted = false,
                            IsEnterprise = true,
                            IsHTC = true,
                            IsPartner = false
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ContractorAggregate.ContractorProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserIdentityGuid")
                        .HasColumnType("varchar(68) CHARACTER SET utf8mb4")
                        .HasMaxLength(68);

                    b.Property<int?>("ContractorCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ContractorCategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ContractorClassId")
                        .HasColumnType("int");

                    b.Property<string>("ContractorClassName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorGroupIds")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorGroupNames")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("ContractorIndustryIds")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractorIndustryNames")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ContractorStructureId")
                        .HasColumnType("int");

                    b.Property<string>("ContractorStructureName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ContractorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ContractorTypeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("ContractorProperties");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.CurrencyUnitAggregate.CurrencyUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitSymbol")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IssuingCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyUnitCode = "VND",
                            CurrencyUnitName = "Đồng",
                            CurrencyUnitSymbol = "đ",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IssuingCountry = "Việt Nam"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyUnitCode = "USD",
                            CurrencyUnitName = "Dollar",
                            CurrencyUnitSymbol = "$",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IssuingCountry = "United State"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.EquipmentAggregate.EquipmentPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentPictures");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.EquipmentAggregate.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DeviceSupplies")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Specifications")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UnitOfMeasurementId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.EquipmentAggregate.UnitOfMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("ConversionRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBaseOfType")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Label")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("UnitOfMeasurement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConversionRate = 1m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cái",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = true,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "Cái",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            ConversionRate = 1m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mét",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = true,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "m",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            ConversionRate = 3600m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giờ",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = false,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "h",
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            ConversionRate = 60m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Phút",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = false,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "m",
                            Type = 2
                        },
                        new
                        {
                            Id = 5,
                            ConversionRate = 1m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Giây",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = true,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "s",
                            Type = 2
                        },
                        new
                        {
                            Id = 6,
                            ConversionRate = 1m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kilobit/s",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = true,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "Kbps",
                            Type = 3
                        },
                        new
                        {
                            Id = 7,
                            ConversionRate = 1024m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Megabit/s",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = false,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "Mbps",
                            Type = 3
                        },
                        new
                        {
                            Id = 8,
                            ConversionRate = 1048576m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Gigabit/s",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = false,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "Gbps",
                            Type = 3
                        },
                        new
                        {
                            Id = 9,
                            ConversionRate = 1m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kilobyte",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = true,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "kB",
                            Type = 4
                        },
                        new
                        {
                            Id = 10,
                            ConversionRate = 1024m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Megabyte",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = false,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "MB",
                            Type = 4
                        },
                        new
                        {
                            Id = 11,
                            ConversionRate = 1048576m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Gigabyte",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = false,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "GB",
                            Type = 4
                        },
                        new
                        {
                            Id = 12,
                            ConversionRate = 1073741824m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Terabyte",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = false,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "TB",
                            Type = 4
                        },
                        new
                        {
                            Id = 13,
                            ConversionRate = 1099511627776m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "PetaByte",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsBaseOfType = false,
                            IsDeleted = false,
                            IsRequired = true,
                            Label = "PB",
                            Type = 4
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ExchangeRateAggregate.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Buy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("BuyValue")
                        .HasColumnType("double");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Sell")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("SellValue")
                        .HasColumnType("double");

                    b.Property<string>("Transfer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("TransferValue")
                        .HasColumnType("double");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.InContractAggregate.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("InContractId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OutContractId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InContractId");

                    b.HasIndex("OutContractId");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.InContractAggregate.ContractSharingRevenueLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CsMaintenanceUid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("InContractCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("InContractId")
                        .HasColumnType("int");

                    b.Property<int?>("InServiceChannelId")
                        .HasColumnType("int");

                    b.Property<string>("InServiceChannelUid")
                        .HasColumnType("varchar(68) CHARACTER SET utf8mb4")
                        .HasMaxLength(68);

                    b.Property<decimal>("InSharedFixedAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("InSharedInstallFeePercent")
                        .HasColumnType("float");

                    b.Property<float>("InSharedPackagePercent")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OutContractCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OutContractId")
                        .HasColumnType("int");

                    b.Property<int?>("OutServiceChannelId")
                        .HasColumnType("int");

                    b.Property<decimal>("OutSharedFixedAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("OutSharedInstallFeePercent")
                        .HasColumnType("float");

                    b.Property<float>("OutSharedPackagePercent")
                        .HasColumnType("float");

                    b.Property<int>("SharingType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InContractId");

                    b.HasIndex("InServiceChannelId");

                    b.HasIndex("OutContractId");

                    b.HasIndex("OutServiceChannelId");

                    b.ToTable("ContractSharingRevenueLines");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.InContractAggregate.InContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AgentCode")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("AgentId")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CashierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CityId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("CityName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ContractNote")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ContractStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractViolation")
                        .HasColumnType("int");

                    b.Property<int?>("ContractViolationType")
                        .HasColumnType("int");

                    b.Property<int?>("ContractorHTCId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("DistrictId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("DistrictName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("FiberNodeInfo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdentityGuid")
                        .HasColumnType("varchar(68) CHARACTER SET utf8mb4")
                        .HasMaxLength(68);

                    b.Property<int?>("InterestOnDefferedPayment")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsControlUsageCapacity")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHasOneCurrency")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsIncidentControl")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MarketAreaId")
                        .HasColumnType("int");

                    b.Property<string>("MarketAreaName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("NumberBillingLimitDays")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationUnitId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationUnitName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("SalesmanId")
                        .HasColumnType("int");

                    b.Property<string>("SignedUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SignedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<float>("TotalTaxPercent")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ContractCode")
                        .IsUnique();

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("ContractorHTCId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("IdentityGuid")
                        .IsUnique();

                    b.ToTable("InContracts");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.InContractAggregate.InContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("InContractTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Thuê kênh"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Phân chia hoa hồng"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Phân chia doanh thu"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bảo trì, bảo dưỡng"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.InContractAggregate.PointType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PointTypes");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = ""
                        },
                        new
                        {
                            Id = 1,
                            Name = "Điểm đầu"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Điểm cuối"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.MarketArea.MarketArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MarketCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MarketName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("TreeLevel")
                        .HasColumnType("int");

                    b.Property<string>("TreePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("MarketAreas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            MarketCode = "MB",
                            MarketName = "Miền Bắc",
                            TreeLevel = 0,
                            TreePath = ""
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            MarketCode = "MT",
                            MarketName = "Miền Trung",
                            TreeLevel = 0,
                            TreePath = ""
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            MarketCode = "MN",
                            MarketName = "Miền Nam",
                            TreeLevel = 0,
                            TreePath = ""
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.ContractEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EquipmentPictureUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("EquipmentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentUom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("ExaminedGrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ExaminedSubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("ExaminedUnit")
                        .HasColumnType("float");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("HasToReclaim")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInSurveyPlan")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MacAddressCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OutContractPackageId")
                        .HasColumnType("int");

                    b.Property<int>("OutputChannelPointId")
                        .HasColumnType("int");

                    b.Property<decimal>("RealGrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("RealSubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("RealUnit")
                        .HasColumnType("float");

                    b.Property<decimal>("ReclaimedGrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ReclaimedSubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("ReclaimedUnit")
                        .HasColumnType("float");

                    b.Property<string>("SerialCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Specifications")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("TransactionEquipmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentStatusId");

                    b.HasIndex("OutputChannelPointId");

                    b.HasIndex("TransactionEquipmentId")
                        .IsUnique();

                    b.ToTable("ContractEquipments");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.EquipmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("EquipmentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Trong kế hoạch triển khai"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Đã triển khai"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Đang chờ thu hồi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Đã thu hồi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Đã hủy"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Không thể thu hồi"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Tạm giữ"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AgentCode")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("AgentContractCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AgentId")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CashierFullName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CashierUserId")
                        .HasColumnType("varchar(68) CHARACTER SET utf8mb4")
                        .HasMaxLength(68);

                    b.Property<string>("CashierUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CityId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("CityName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ContractNote")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ContractStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractViolation")
                        .HasColumnType("int");

                    b.Property<int?>("ContractViolationType")
                        .HasColumnType("int");

                    b.Property<int?>("ContractorHTCId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCareStaffUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("DistrictId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("DistrictName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("FiberNodeInfo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdentityGuid")
                        .HasColumnType("varchar(68) CHARACTER SET utf8mb4")
                        .HasMaxLength(68);

                    b.Property<int?>("InterestOnDefferedPayment")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAutomaticGenerateReceipt")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsControlUsageCapacity")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHasOneCurrency")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsIncidentControl")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MarketAreaId")
                        .HasColumnType("int");

                    b.Property<string>("MarketAreaName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("NumberBillingLimitDays")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationUnitId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationUnitName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("SalesmanId")
                        .HasColumnType("int");

                    b.Property<string>("SignedUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SignedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<float>("TotalTaxPercent")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ContractCode")
                        .IsUnique();

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("ContractorHTCId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("IdentityGuid")
                        .IsUnique();

                    b.ToTable("OutContracts");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BandwidthLabel")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CId")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<float?>("CableKilometers")
                        .HasColumnType("float");

                    b.Property<string>("CableRoutingNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ChannelGroupId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<float>("DomesticBandwidth")
                        .HasColumnType("float");

                    b.Property<string>("DomesticBandwidthUom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EndPointChannelId")
                        .HasColumnType("int");

                    b.Property<decimal>("EquipmentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("FlexiblePricingTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("GrandTotalBeforeTax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("HasDistinguishBandwidth")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasStartAndEndPoint")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("InContractId")
                        .HasColumnType("int");

                    b.Property<decimal>("InstallationFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("InternationalBandwidth")
                        .HasColumnType("float");

                    b.Property<string>("InternationalBandwidthUom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("IsDefaultSLAByServiceId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFreeStaticIp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHasServicePackage")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInFirstBilling")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRadiusAccountCreated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsTechnicalConfirmation")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("LineQuantity")
                        .HasColumnType("float");

                    b.Property<decimal?>("MaxSubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("MinSubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<decimal>("OrgPackagePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("OtherFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("OtherNote")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("OutContractId")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<decimal>("PackagePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PaymentTargetId")
                        .HasColumnType("int");

                    b.Property<decimal>("PromotionAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("RadiusAccount")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("RadiusPassword")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("RadiusServerId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("ServicePackageId")
                        .HasColumnType("int");

                    b.Property<int?>("StartPointChannelId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SubTotalBeforeTax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("TaxPercent")
                        .HasColumnType("float");

                    b.Property<int?>("TransactionServicePackageId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EndPointChannelId");

                    b.HasIndex("FlexiblePricingTypeId");

                    b.HasIndex("InContractId");

                    b.HasIndex("OutContractId");

                    b.HasIndex("PaymentTargetId");

                    b.HasIndex("StartPointChannelId");

                    b.HasIndex("TransactionServicePackageId")
                        .IsUnique();

                    b.ToTable("OutContractServicePackages");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackageClearing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Change")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDaysPlus")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OutContractServicePackageId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OutContractServicePackageId");

                    b.ToTable("OutContractServicePackageClearings");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("OutContractTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cá nhân"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Doanh nghiệp"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutputChannelPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ApplyFeeToChannel")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<decimal>("EquipmentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("InstallationFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LocationId")
                        .HasColumnType("varchar(68) CHARACTER SET utf8mb4")
                        .HasMaxLength(68);

                    b.Property<decimal>("MonthlyCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("OtherFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PointType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("OutputChannelPoints");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.ServicePackageSuspensionTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DaysSuspended")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OutContractServicePackageId")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SuspensionStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OutContractServicePackageId");

                    b.ToTable("ServicePackageSuspensionTimes");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.TemporaryPayingContract", b =>
                {
                    b.Property<int>("OutContractId")
                        .HasColumnType("int");

                    b.Property<int>("ServicePackageId")
                        .HasColumnType("int");

                    b.HasKey("OutContractId", "ServicePackageId");

                    b.ToTable("TemporaryPayingContracts");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ProjectAggregate.ManagementBusinessBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BusinessBlockName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ManagementBusinessBlocks");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ProjectAggregate.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AgentContractCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessBlockId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CityId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DistrictId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdentityGuid")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MarketAreaId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSupporters")
                        .HasColumnType("int");

                    b.Property<string>("NumberOfUnits")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProjectCode")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ProjectName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityGuid")
                        .IsUnique();

                    b.HasIndex("MarketAreaId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ProjectAggregate.ProjectTechnician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TechnicianName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserTechnicianId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTechnicians");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.PromotionAggregate.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PromotionCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PromotionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PromotionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.PromotionAggregate.PromotionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Area")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AreaId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CityId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DistrictId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumberOfMonthApplied")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<string>("PromotionValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PromotionValueType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ServicePackageId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PromotionDetails");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.PromotionAggregate.PromotionForContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumberMonthApplied")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OutContractServicePackageId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionDetailId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<string>("PromotionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PromotionType")
                        .HasColumnType("int");

                    b.Property<string>("PromotionTypeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("PromotionValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("PromotionValueType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OutContractServicePackageId");

                    b.ToTable("PromotionForContracts");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.PromotionAggregate.PromotionProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOurProduct")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PromotionDetailId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PromotionProducts");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.PromotionAggregate.PromotionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PromotionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PromotionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            PromotionName = "Tặng cước dịch vụ"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            PromotionName = "Tặng thời gian sử dụng"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            PromotionName = "Tặng sản phẩm"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.PromotionAggregate.PromotionValueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PromotionValueTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Giảm trừ cước (% giá trị)"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Giảm trừ cước (tiền mặt)"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tặng thời gian sử dụng (theo tháng)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tặng thời gian sử dụng (theo ngày)"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tặng sản phẩm công ty"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tặng sản phẩm khác"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Khuyến mại khác"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.RadiusAggregate.BrasInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("IP")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ManualAPIPort")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SSHPort")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BrasInformation");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.RadiusAggregate.RadiusServerInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DatabasePassword")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DatabasePort")
                        .HasColumnType("int");

                    b.Property<string>("DatabaseUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("IP")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MarketAreaId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SSHPassword")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SSHUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ServerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("RadiusServerInformation");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.SalesmanAggregate.Salesman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdentityGuid")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityGuid")
                        .IsUnique();

                    b.ToTable("Salesman");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.ChannelGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ChannelGroupCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ChannelGroupName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ChannelGroupType")
                        .HasColumnType("int");

                    b.Property<string>("ContractorIdGuid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ChannelGroups");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.ChannelPriceBusTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BasedPriceValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDomestic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PriceUnitUomId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("UsageBaseUomValueFrom")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("UsageBaseUomValueTo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("UsageValueFrom")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("UsageValueFromUomId")
                        .HasColumnType("int");

                    b.Property<decimal?>("UsageValueTo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("UsageValueToUomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelPriceBusTables");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.FlexiblePricingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("FlexiblePricingType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Đơn giá cố định hàng tháng"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Đơn giá cố định có tính vượt mức"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Đơn giá lũy kế theo dung lượng sử dụng"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bustable hàng ngày"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bustable hàng tháng"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvatarId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("HasCableKilometers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasDistinguishBandwidth")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasLineQuantity")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasPackages")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasStartAndEndPoint")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ServiceName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 20, 48, 323, DateTimeKind.Unspecified),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 1,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = true,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = true,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "01",
                            ServiceName = "Internet trực tiếp (Internet leased line - ILL)",
                            ServicePrice = 0m,
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2020, 9, 9, 6, 47, 0, 966, DateTimeKind.Unspecified).AddTicks(1590)
                        },
                        new
                        {
                            Id = 2,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 21, 30, 719, DateTimeKind.Unspecified).AddTicks(3380),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 1,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "02",
                            ServiceName = "Internet bán ra nước ngoài",
                            ServicePrice = 0m,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 3,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 27, 55, 793, DateTimeKind.Unspecified),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 1,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = true,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "03",
                            ServiceName = "Kênh thuê riêng trong nước (SDH,)",
                            ServicePrice = 0m,
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2020, 9, 15, 2, 34, 44, 515, DateTimeKind.Unspecified).AddTicks(6240)
                        },
                        new
                        {
                            Id = 4,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 28, 10, 304, DateTimeKind.Unspecified).AddTicks(2800),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 1,
                            HasCableKilometers = true,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = true,
                            HasPackages = false,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "04",
                            ServiceName = "Thuê sợi quang",
                            ServicePrice = 0m,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 5,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 28, 24, 554, DateTimeKind.Unspecified).AddTicks(490),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 1,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "05",
                            ServiceName = "Kênh thuê riêng quốc tế (Có điểm kết nối ngoài Việt Nam)",
                            ServicePrice = 0m,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 6,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 29, 54, 479, DateTimeKind.Unspecified).AddTicks(610),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 1,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "06",
                            ServiceName = "VPN/Metro/MPLS trong nước (Các loại IP)",
                            ServicePrice = 0m,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 7,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 30, 6, 652, DateTimeKind.Unspecified).AddTicks(6790),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 1,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "07",
                            ServiceName = "VPN/Metro/MPLS quốc tế ",
                            ServicePrice = 0m,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 8,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 30, 25, 66, DateTimeKind.Unspecified).AddTicks(3260),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 1,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = true,
                            HasLineQuantity = false,
                            HasPackages = true,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "08",
                            ServiceName = "Internet băng rộng FTTH ",
                            ServicePrice = 0m,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 9,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 31, 26, 432, DateTimeKind.Unspecified),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 1,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = true,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "09",
                            ServiceName = "DV truyền dẫn khác",
                            ServicePrice = 0m,
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2020, 9, 14, 7, 42, 29, 20, DateTimeKind.Unspecified).AddTicks(8370)
                        },
                        new
                        {
                            Id = 10,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 33, 34, 692, DateTimeKind.Unspecified).AddTicks(60),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 2,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "10",
                            ServiceName = "Điện thoại cố định",
                            ServicePrice = 0m,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 11,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 33, 58, 286, DateTimeKind.Unspecified).AddTicks(1170),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 2,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "11",
                            ServiceName = "SMS Marketing/SMS",
                            ServicePrice = 0m,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 12,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 34, 40, 991, DateTimeKind.Unspecified).AddTicks(2040),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 2,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "12",
                            ServiceName = "1900/1800",
                            ServicePrice = 0m,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 13,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 37, 15, 139, DateTimeKind.Unspecified).AddTicks(4560),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 2,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "13",
                            ServiceName = "Tổng đài ảo",
                            ServicePrice = 0m,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 14,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 37, 30, 897, DateTimeKind.Unspecified).AddTicks(5020),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 2,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "14",
                            ServiceName = "Các dịch vụ thoại IP khác",
                            ServicePrice = 0m,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 15,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 38, 7, 741, DateTimeKind.Unspecified).AddTicks(5550),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 3,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "15",
                            ServiceName = "Các dịch vụ Hosting (Tele + Web + data center, thiết kế web, thuê đặt máy chủ)",
                            ServicePrice = 0m,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 16,
                            AvatarId = 0,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 4, 38, 17, 737, DateTimeKind.Unspecified),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupId = 3,
                            HasCableKilometers = false,
                            HasDistinguishBandwidth = false,
                            HasLineQuantity = false,
                            HasPackages = false,
                            HasStartAndEndPoint = false,
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            ServiceCode = "16",
                            ServiceName = "Các dịch vụ GTGT khác (Video…)",
                            ServicePrice = 0m,
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2020, 10, 14, 8, 43, 45, 787, DateTimeKind.Unspecified).AddTicks(9530)
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.ServiceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("GroupCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GroupName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ServiceGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 2, 11, 35, 964, DateTimeKind.Unspecified).AddTicks(6270),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupCode = "NTD",
                            GroupName = "Nhóm truyền dẫn",
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(1900, 1, 20, 2, 11, 48, 891, DateTimeKind.Unspecified).AddTicks(6470),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupCode = "DVT",
                            GroupName = "Nhóm dịch vụ thoại IP",
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "",
                            CreatedDate = new DateTime(1900, 1, 20, 2, 12, 0, 105, DateTimeKind.Unspecified).AddTicks(2170),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupCode = "GTGT",
                            GroupName = "Nhóm dịch vụ GTGT",
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 9, 9, 2, 12, 15, 264, DateTimeKind.Unspecified),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupCode = "CNTTGPTH",
                            GroupName = "Nhóm các dịch vụ CNTT/ Giải pháp tích hợp",
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(1900, 1, 20, 8, 42, 11, 620, DateTimeKind.Unspecified).AddTicks(3180)
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "",
                            CreatedDate = new DateTime(1900, 1, 20, 8, 42, 44, 138, DateTimeKind.Unspecified).AddTicks(1960),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupCode = "DVTT01",
                            GroupName = "Nhóm dịch vụ TT truyền thông",
                            IsActive = true,
                            IsDeleted = true,
                            OrganizationPath = "",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(1900, 1, 20, 8, 42, 51, 149, DateTimeKind.Unspecified).AddTicks(4590)
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 10, 19, 8, 28, 34, 323, DateTimeKind.Unspecified).AddTicks(360),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupCode = "DVTD",
                            GroupName = "Nhóm các dịch vụ truyền dẫn",
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 10, 19, 8, 28, 58, 726, DateTimeKind.Unspecified),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupCode = "NDVT",
                            GroupName = "Nhóm dịch vụ thoại IP",
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2020, 10, 19, 8, 32, 29, 706, DateTimeKind.Unspecified).AddTicks(1280)
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 10, 19, 7, 43, 30, 728, DateTimeKind.Unspecified).AddTicks(1010),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupCode = "CNTTGPTH",
                            GroupName = "Nhóm các dịch vụ CNTT/ Giải pháp tích hợp",
                            IsActive = true,
                            IsDeleted = true,
                            OrganizationPath = "",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 10, 19, 7, 43, 47, 721, DateTimeKind.Unspecified).AddTicks(4780),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupCode = "GTGT",
                            GroupName = "Nhóm dịch vụ GTGT",
                            IsActive = true,
                            IsDeleted = true,
                            OrganizationPath = "",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 10, 19, 7, 44, 0, 123, DateTimeKind.Unspecified).AddTicks(4350),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupCode = "DVT",
                            GroupName = "Nhóm dịch vụ thoại IP",
                            IsActive = true,
                            IsDeleted = true,
                            OrganizationPath = "",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 18,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2020, 10, 19, 8, 30, 9, 26, DateTimeKind.Unspecified).AddTicks(6230),
                            Culture = "",
                            DisplayOrder = 0,
                            GroupCode = "CNTT",
                            GroupName = "Nhóm dịch vụ CNTT",
                            IsActive = true,
                            IsDeleted = false,
                            OrganizationPath = "",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.ServicePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BandwidthLabel")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<float>("DomesticBandwidth")
                        .HasColumnType("float");

                    b.Property<string>("DomesticBandwidthUom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DomesticBandwidthUomId")
                        .HasColumnType("int");

                    b.Property<float>("InternationalBandwidth")
                        .HasColumnType("float");

                    b.Property<string>("InternationalBandwidthUom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("InternationalBandwidthUomId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PackageCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PackageName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DomesticBandwidthUomId");

                    b.HasIndex("InternationalBandwidthUomId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicePackages");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.ServicePackagePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("PriceValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("ServicePackagePrice");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.ServicePackageRadiusService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RadiusServerId")
                        .HasColumnType("int");

                    b.Property<int>("RadiusServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ServicePackageId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("ServicePackageRadiusServices");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TaxAggreagate.TaxCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ExplainTax")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TaxCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TaxName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("TaxValue")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("TaxCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            ExplainTax = "",
                            IsActive = true,
                            IsDeleted = false,
                            TaxCode = "VAT",
                            TaxName = "Giá trị gia tăng",
                            TaxValue = 10f,
                            UserId = 1,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            ExplainTax = "",
                            IsActive = true,
                            IsDeleted = false,
                            TaxCode = "WHT",
                            TaxName = "Thuế nhà thầu nước ngoài",
                            TaxValue = 10f,
                            UserId = 1,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.ReasonTypeContractTermination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ReasonTypeContractTerminations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "HTC ITC dừng cung cấp dịch vụ"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Yêu cầu của khách hàng"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Quá hạn thanh toán công nợ"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Lý do khác"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AcceptanceNotes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AcceptanceStaff")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal?>("ChangeEquipmentFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("ChangingPackageFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("ChaningLocationFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContractCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ContractType")
                        .HasColumnType("int");

                    b.Property<int?>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HandleUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("HasEquipment")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("InContractId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAppendix")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsTechnicalConfirmation")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MarketAreaId")
                        .HasColumnType("int");

                    b.Property<string>("MarketAreaName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationUnitId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OutContractId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ReasonType")
                        .HasColumnType("int");

                    b.Property<decimal?>("RestoreHandleFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SuspendHandleFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TechnicalStaffId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("UpgradeFee")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("InContractId");

                    b.HasIndex("OutContractId");

                    b.HasIndex("ReasonType");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionChannelPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ApplyFeeToChannel")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<decimal>("EquipmentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("InstallationFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LocationId")
                        .HasColumnType("varchar(68) CHARACTER SET utf8mb4")
                        .HasMaxLength(68);

                    b.Property<decimal>("MonthlyCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("OtherFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PointType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TransactionChannelPoints");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionChannelTax", b =>
                {
                    b.Property<int>("TaxCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionServicePackageId")
                        .HasColumnType("int");

                    b.Property<string>("TaxCategoryCode")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("TaxCategoryName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<float>("TaxValue")
                        .HasColumnType("float");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("TaxCategoryId", "TransactionServicePackageId");

                    b.HasIndex("TransactionServicePackageId");

                    b.ToTable("TransactionChannelTaxes");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ContractEquipmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EquipmentPictureUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("EquipmentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentUom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("ExaminedGrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ExaminedSubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("ExaminedUnit")
                        .HasColumnType("float");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("HasToReclaim")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAcceptanced")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInSurveyPlan")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsOld")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MacAddressCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OldEquipmentId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OutContractPackageId")
                        .HasColumnType("int");

                    b.Property<int>("OutputChannelPointId")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("RealGrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("RealSubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("RealUnit")
                        .HasColumnType("float");

                    b.Property<decimal>("ReclaimedGrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ReclaimedSubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("ReclaimedUnit")
                        .HasColumnType("float");

                    b.Property<string>("SerialCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ServiceName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Specifications")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionServicePackageId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentStatusId");

                    b.HasIndex("OutputChannelPointId");

                    b.ToTable("TransactionEquipments");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionPriceBusTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BasedPriceValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDomestic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PriceUnitUomId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("TransactionServicePackageId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("UsageBaseUomValueFrom")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("UsageBaseUomValueTo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("UsageValueFrom")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("UsageValueFromUomId")
                        .HasColumnType("int");

                    b.Property<decimal?>("UsageValueTo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("UsageValueToUomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionServicePackageId");

                    b.ToTable("TransactionPriceBusTables");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionPromotionForContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumberMonthApplied")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OutContractServicePackageId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionDetailId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<string>("PromotionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PromotionType")
                        .HasColumnType("int");

                    b.Property<string>("PromotionTypeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("PromotionValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("PromotionValueType")
                        .HasColumnType("int");

                    b.Property<int>("TransactionServicePackageId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TransactionServicePackageId");

                    b.ToTable("TransactionPromotionForContracts");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ReasonType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TransactionReasons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bảo trì hệ thống HTC-ITC",
                            ReasonType = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sự cố hệ thống HTC-ITC",
                            ReasonType = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sự cố hạ tầng kỹ thuật nơi triển khai",
                            ReasonType = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Yêu cầu của khách hàng",
                            ReasonType = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Dịch chuyển địa điểm",
                            ReasonType = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Lý do khác",
                            ReasonType = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "HTC ITC dừng cung cấp dịch vụ",
                            ReasonType = 2
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Yêu cầu của khách hàng",
                            ReasonType = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Quá hạn thanh toán công nợ",
                            ReasonType = 2
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Lý do khác",
                            ReasonType = 2
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionServiceLevelAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionServicePackageId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("varchar(68) CHARACTER SET utf8mb4")
                        .HasMaxLength(68);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TransactionServicePackageId");

                    b.ToTable("TransactionSLAs");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionServicePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BandwidthLabel")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CId")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<float?>("CableKilometers")
                        .HasColumnType("float");

                    b.Property<string>("CableRoutingNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ChannelGroupId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyUnitCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<float>("DomesticBandwidth")
                        .HasColumnType("float");

                    b.Property<string>("DomesticBandwidthUom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EndPointChannelId")
                        .HasColumnType("int");

                    b.Property<decimal>("EquipmentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("FlexiblePricingTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("GrandTotalBeforeTax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("HasDistinguishBandwidth")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasStartAndEndPoint")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("InContractId")
                        .HasColumnType("int");

                    b.Property<decimal>("InstallationFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("InternationalBandwidth")
                        .HasColumnType("float");

                    b.Property<string>("InternationalBandwidthUom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsAcceptanced")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("IsDefaultSLAByServiceId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFreeStaticIp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHasServicePackage")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInFirstBilling")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsOld")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRadiusAccountCreated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsTechnicalConfirmation")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("LineQuantity")
                        .HasColumnType("float");

                    b.Property<decimal?>("MaxSubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("MinSubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("NeedEnterStartPoint")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("OldId")
                        .HasColumnType("int");

                    b.Property<decimal>("OrgPackagePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("OrganizationPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("OtherFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("OtherNote")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("OutContractId")
                        .HasColumnType("int");

                    b.Property<int>("OutContractServicePackageId")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<decimal>("PackagePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PaymentTargetId")
                        .HasColumnType("int");

                    b.Property<decimal>("PromotionAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("RadiusAccount")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("RadiusPassword")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("RadiusServerId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("ServicePackageId")
                        .HasColumnType("int");

                    b.Property<int?>("StartPointChannelId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SubTotalBeforeTax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("TaxPercent")
                        .HasColumnType("float");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionServicePackageId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EndPointChannelId");

                    b.HasIndex("PaymentTargetId");

                    b.HasIndex("StartPointChannelId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionServicePackages");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Permission")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TransactionType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Thêm mới dịch vụ/gói cước",
                            Permission = "APPROVED_ADD_NEW_SERVICE_PACKAGE_OUT_CONTRACT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Điều chỉnh gói cước",
                            Permission = "APPROVED_CHANGE_SERVICE_PACKAGE_OUT_CONTRACT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tạm ngưng dịch vụ",
                            Permission = "APPROVED_SUSPEND_SERVICE_PACKAGE_OUT_CONTRACT"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hủy dịch vụ",
                            Permission = "APPROVED_TERMINATE_SERVICE_PACKAGE_OUT_CONTRACT"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dịch chuyển địa điểm",
                            Permission = "APPROVED_CHANGE_LOCATION_OUT_CONTRACT"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thay đổi thiết bị",
                            Permission = "APPROVED_CHANGE_EQUIPMENT_OUT_CONTRACT"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Thu hồi thiết bị",
                            Permission = "APPROVED_RECLAIM_EQUIPMENT_OUT_CONTRACT"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Thanh lý hợp đồng",
                            Permission = "APPROVED_TERMINATE_OUT_CONTRACT"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nâng cấp thiết bị",
                            Permission = "APPROVED_UPGRADE_EQUIPMENTS_OUT_CONTRACT"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Nâng cấp băng thông",
                            Permission = "APPROVED_UPGRADE_BANDWIDTH_OUT_CONTRACT"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Khôi phục dịch vụ",
                            Permission = "APPROVED_RESTORE_SERVICE_PACKAGE_OUT_CONTRACT"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Triển khai hợp đồng mới",
                            Permission = "APPROVED_DEPLOY_NEW_OUT_CONTRACT"
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.BaseContract.ContractContent", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregateModels.PictureAggregate.Picture", "ContractFormSignature")
                        .WithMany()
                        .HasForeignKey("ContractFormSignatureId");

                    b.HasOne("ContractManagement.Domain.AggregateModels.PictureAggregate.Picture", "DigitalSignature")
                        .WithMany()
                        .HasForeignKey("DigitalSignatureId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.InContractAggregate.InContract", "InContract")
                        .WithOne("ContractContent")
                        .HasForeignKey("ContractManagement.Domain.AggregatesModel.BaseContract.ContractContent", "InContractId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContract", "OutContract")
                        .WithOne("ContractContent")
                        .HasForeignKey("ContractManagement.Domain.AggregatesModel.BaseContract.ContractContent", "OutContractId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.BaseContract.ContractForm", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregateModels.PictureAggregate.Picture", "DigitalSignature")
                        .WithMany()
                        .HasForeignKey("DigitalSignatureId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.BaseContract.ContractTotalByCurrency", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.InContractAggregate.InContract", null)
                        .WithMany("ContractTotalByCurrencies")
                        .HasForeignKey("InContractId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContract", null)
                        .WithMany("ContractTotalByCurrencies")
                        .HasForeignKey("OutContractId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.BaseContract.ServiceLevelAgreement", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackage", null)
                        .WithMany("ServiceLevelAgreements")
                        .HasForeignKey("OutContractServicePackageId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.Commons.AttachmentFile", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.InContractAggregate.InContract", null)
                        .WithMany()
                        .HasForeignKey("InContractId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContract", null)
                        .WithMany()
                        .HasForeignKey("OutContractId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.TransactionAggregate.Transaction", null)
                        .WithMany("AttachmentFiles")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ContractOfTaxAggregate.InContractTax", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.InContractAggregate.InContract", null)
                        .WithMany("InContractTax")
                        .HasForeignKey("InContractId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ContractOfTaxAggregate.OutContractServicePackageTax", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackage", "OutContractServicePackage")
                        .WithMany("TaxValues")
                        .HasForeignKey("OutContractServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManagement.Domain.AggregatesModel.TaxAggreagate.TaxCategory", "TaxCategory")
                        .WithMany()
                        .HasForeignKey("TaxCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ContractorAggregate.ContractorProperties", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.ContractorAggregate.Contractor", null)
                        .WithMany()
                        .HasForeignKey("ContractorId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.InContractAggregate.ContactInfo", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.InContractAggregate.InContract", null)
                        .WithMany("ContactInfos")
                        .HasForeignKey("InContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContract", null)
                        .WithMany("ContactInfos")
                        .HasForeignKey("OutContractId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.InContractAggregate.ContractSharingRevenueLine", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.InContractAggregate.InContract", null)
                        .WithMany("ContractSharingRevenues")
                        .HasForeignKey("InContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackage", null)
                        .WithMany()
                        .HasForeignKey("InServiceChannelId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContract", null)
                        .WithMany("ContractSharingRevenues")
                        .HasForeignKey("OutContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackage", null)
                        .WithMany()
                        .HasForeignKey("OutServiceChannelId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.InContractAggregate.InContract", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.BaseContract.ContractStatus", "ContractStatus")
                        .WithMany()
                        .HasForeignKey("ContractStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManagement.Domain.AggregatesModel.ContractorAggregate.Contractor", "ContractorHTC")
                        .WithMany()
                        .HasForeignKey("ContractorHTCId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.ContractorAggregate.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId");

                    b.OwnsOne("ContractManagement.Domain.AggregatesModel.BaseContract.ContractTimeLine", "TimeLine", b1 =>
                        {
                            b1.Property<int>("InContractId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Effective")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("Expiration")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("LatestBilling")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("Liquidation")
                                .HasColumnType("datetime(6)");

                            b1.Property<int>("PaymentPeriod")
                                .HasColumnType("int");

                            b1.Property<int>("RenewPeriod")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Signed")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("InContractId");

                            b1.ToTable("InContracts");

                            b1.WithOwner()
                                .HasForeignKey("InContractId");
                        });

                    b.OwnsOne("ContractManagement.Domain.AggregatesModel.ContractorAggregate.PaymentMethod", "Payment", b1 =>
                        {
                            b1.Property<int>("InContractId")
                                .HasColumnType("int");

                            b1.Property<string>("Address")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<int>("Form")
                                .HasColumnType("int");

                            b1.Property<int>("Method")
                                .HasColumnType("int");

                            b1.HasKey("InContractId");

                            b1.ToTable("InContracts");

                            b1.WithOwner()
                                .HasForeignKey("InContractId");
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.ContractEquipment", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.EquipmentStatus", "EquipmentStatus")
                        .WithMany()
                        .HasForeignKey("EquipmentStatusId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutputChannelPoint", null)
                        .WithMany("Equipments")
                        .HasForeignKey("OutputChannelPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionEquipment", null)
                        .WithOne()
                        .HasForeignKey("ContractManagement.Domain.AggregatesModel.OutContractAggregate.ContractEquipment", "TransactionEquipmentId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContract", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.BaseContract.ContractStatus", "ContractStatus")
                        .WithMany()
                        .HasForeignKey("ContractStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManagement.Domain.AggregatesModel.ContractorAggregate.Contractor", "ContractorHTC")
                        .WithMany()
                        .HasForeignKey("ContractorHTCId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.ContractorAggregate.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId");

                    b.OwnsOne("ContractManagement.Domain.AggregatesModel.BaseContract.ContractTimeLine", "TimeLine", b1 =>
                        {
                            b1.Property<int>("OutContractId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Effective")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("Expiration")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("LatestBilling")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("Liquidation")
                                .HasColumnType("datetime(6)");

                            b1.Property<int>("PaymentPeriod")
                                .HasColumnType("int");

                            b1.Property<int>("RenewPeriod")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Signed")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("OutContractId");

                            b1.ToTable("OutContracts");

                            b1.WithOwner()
                                .HasForeignKey("OutContractId");
                        });

                    b.OwnsOne("ContractManagement.Domain.AggregatesModel.ContractorAggregate.PaymentMethod", "Payment", b1 =>
                        {
                            b1.Property<int>("OutContractId")
                                .HasColumnType("int");

                            b1.Property<string>("Address")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<int>("Form")
                                .HasColumnType("int");

                            b1.Property<int>("Method")
                                .HasColumnType("int");

                            b1.HasKey("OutContractId");

                            b1.ToTable("OutContracts");

                            b1.WithOwner()
                                .HasForeignKey("OutContractId");
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackage", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutputChannelPoint", "EndPoint")
                        .WithMany()
                        .HasForeignKey("EndPointChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManagement.Domain.AggregatesModel.ServicePackages.FlexiblePricingType", null)
                        .WithMany()
                        .HasForeignKey("FlexiblePricingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManagement.Domain.AggregatesModel.InContractAggregate.InContract", null)
                        .WithMany("ServicePackages")
                        .HasForeignKey("InContractId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContract", null)
                        .WithMany("ServicePackages")
                        .HasForeignKey("OutContractId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.ContractorAggregate.Contractor", "PaymentTarget")
                        .WithMany()
                        .HasForeignKey("PaymentTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutputChannelPoint", "StartPoint")
                        .WithMany()
                        .HasForeignKey("StartPointChannelId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionServicePackage", null)
                        .WithOne()
                        .HasForeignKey("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackage", "TransactionServicePackageId");

                    b.OwnsOne("ContractManagement.Domain.AggregatesModel.BaseContract.BillingTimeLine", "TimeLine", b1 =>
                        {
                            b1.Property<int>("OutContractServicePackageId")
                                .HasColumnType("int");

                            b1.Property<int>("DaysPromotion")
                                .HasColumnType("int");

                            b1.Property<int>("DaysSuspended")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Effective")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("LatestBilling")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("NextBilling")
                                .HasColumnType("datetime(6)");

                            b1.Property<int>("PaymentForm")
                                .HasColumnType("int");

                            b1.Property<int>("PaymentPeriod")
                                .HasColumnType("int");

                            b1.Property<int>("PrepayPeriod")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Signed")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("StartBilling")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("SuspensionEndDate")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("SuspensionStartDate")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("TerminateDate")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("OutContractServicePackageId");

                            b1.ToTable("OutContractServicePackages");

                            b1.WithOwner()
                                .HasForeignKey("OutContractServicePackageId");
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackageClearing", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackage", null)
                        .WithMany()
                        .HasForeignKey("OutContractServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutputChannelPoint", b =>
                {
                    b.OwnsOne("ContractManagement.Domain.AggregatesModel.Commons.InstallationAddress", "InstallationAddress", b1 =>
                        {
                            b1.Property<int>("OutputChannelPointId")
                                .HasColumnType("int");

                            b1.Property<string>("Building")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("City")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("CityId")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("District")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("DistrictId")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("Floor")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("RoomNumber")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.HasKey("OutputChannelPointId");

                            b1.ToTable("OutputChannelPoints");

                            b1.WithOwner()
                                .HasForeignKey("OutputChannelPointId");
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.OutContractAggregate.ServicePackageSuspensionTime", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackage", null)
                        .WithMany()
                        .HasForeignKey("OutContractServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ProjectAggregate.Project", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.MarketArea.MarketArea", null)
                        .WithMany()
                        .HasForeignKey("MarketAreaId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ProjectAggregate.ProjectTechnician", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.ProjectAggregate.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.PromotionAggregate.PromotionForContract", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackage", null)
                        .WithMany("AppliedPromotions")
                        .HasForeignKey("OutContractServicePackageId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.ChannelPriceBusTable", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContractServicePackage", null)
                        .WithMany("PriceBusTables")
                        .HasForeignKey("ChannelId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.Service", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.ServicePackages.ServiceGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.ServicePackage", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.EquipmentAggregate.UnitOfMeasurement", null)
                        .WithMany()
                        .HasForeignKey("DomesticBandwidthUomId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.EquipmentAggregate.UnitOfMeasurement", null)
                        .WithMany()
                        .HasForeignKey("InternationalBandwidthUomId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.ServicePackages.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.ServicePackagePrice", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.ServicePackages.ServicePackage", null)
                        .WithMany()
                        .HasForeignKey("ChannelId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.ServicePackages.ServicePackageRadiusService", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.ServicePackages.ServicePackage", "ServicePackage")
                        .WithMany("ServicePackageRadiusServices")
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.Transaction", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.InContractAggregate.InContract", null)
                        .WithMany()
                        .HasForeignKey("InContractId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.OutContract", null)
                        .WithMany("Transactions")
                        .HasForeignKey("OutContractId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonType");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionChannelPoint", b =>
                {
                    b.OwnsOne("ContractManagement.Domain.AggregatesModel.Commons.InstallationAddress", "InstallationAddress", b1 =>
                        {
                            b1.Property<int>("TransactionChannelPointId")
                                .HasColumnType("int");

                            b1.Property<string>("Building")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("City")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("CityId")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("District")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("DistrictId")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("Floor")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("RoomNumber")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                                .HasMaxLength(256);

                            b1.HasKey("TransactionChannelPointId");

                            b1.ToTable("TransactionChannelPoints");

                            b1.WithOwner()
                                .HasForeignKey("TransactionChannelPointId");
                        });
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionChannelTax", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.TaxAggreagate.TaxCategory", "TaxCategory")
                        .WithMany()
                        .HasForeignKey("TaxCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionServicePackage", null)
                        .WithMany("TaxValues")
                        .HasForeignKey("TransactionServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionEquipment", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.OutContractAggregate.EquipmentStatus", "EquipmentStatus")
                        .WithMany()
                        .HasForeignKey("EquipmentStatusId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionChannelPoint", null)
                        .WithMany("Equipments")
                        .HasForeignKey("OutputChannelPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionPriceBusTable", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionServicePackage", null)
                        .WithMany("PriceBusTables")
                        .HasForeignKey("TransactionServicePackageId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionPromotionForContract", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionServicePackage", null)
                        .WithMany("AppliedPromotions")
                        .HasForeignKey("TransactionServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionServiceLevelAgreement", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionServicePackage", null)
                        .WithMany("ServiceLevelAgreements")
                        .HasForeignKey("TransactionServicePackageId");
                });

            modelBuilder.Entity("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionServicePackage", b =>
                {
                    b.HasOne("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionChannelPoint", "EndPoint")
                        .WithMany()
                        .HasForeignKey("EndPointChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManagement.Domain.AggregatesModel.ContractorAggregate.Contractor", "PaymentTarget")
                        .WithMany()
                        .HasForeignKey("PaymentTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManagement.Domain.AggregatesModel.TransactionAggregate.TransactionChannelPoint", "StartPoint")
                        .WithMany()
                        .HasForeignKey("StartPointChannelId");

                    b.HasOne("ContractManagement.Domain.AggregatesModel.TransactionAggregate.Transaction", null)
                        .WithMany("TransactionServicePackages")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ContractManagement.Domain.AggregatesModel.BaseContract.BillingTimeLine", "TimeLine", b1 =>
                        {
                            b1.Property<int>("TransactionServicePackageId")
                                .HasColumnType("int");

                            b1.Property<int>("DaysPromotion")
                                .HasColumnType("int");

                            b1.Property<int>("DaysSuspended")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Effective")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("LatestBilling")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("NextBilling")
                                .HasColumnType("datetime(6)");

                            b1.Property<int>("PaymentForm")
                                .HasColumnType("int");

                            b1.Property<int>("PaymentPeriod")
                                .HasColumnType("int");

                            b1.Property<int>("PrepayPeriod")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Signed")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("StartBilling")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("SuspensionEndDate")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("SuspensionStartDate")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("TerminateDate")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("TransactionServicePackageId");

                            b1.ToTable("TransactionServicePackages");

                            b1.WithOwner()
                                .HasForeignKey("TransactionServicePackageId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
